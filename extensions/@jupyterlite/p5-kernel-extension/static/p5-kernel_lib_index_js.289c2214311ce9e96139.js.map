{"version":3,"file":"p5-kernel_lib_index_js.289c2214311ce9e96139.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACyB;;;;;;;;;;;;;;;;;;;ACFyC;AACd;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,4EAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8DAAe;AAC3C,gBAAgB,QAAQ;AACxB;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,EAAE,IAAI;AACvE;AACA,UAAU,gBAAgB;AAC1B,YAAY;AACZ;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,mCAAmC,OAAO;AAC1C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@jupyterlite/p5-kernel-extension/../p5-kernel/lib/index.js","webpack://@jupyterlite/p5-kernel-extension/../p5-kernel/lib/kernel.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nexport * from './kernel';\n","import { JavaScriptKernel } from '@jupyterlite/javascript-kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * The mimetype for mime bundle results\n */\nconst MIME_TYPE = 'text/html-sandboxed';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class P5Kernel extends JavaScriptKernel {\n    /**\n     * Instantiate a new P5Kernel.\n     *\n     * @param options The instantiation options for a new P5Kernel.\n     */\n    constructor(options) {\n        super(options);\n        this._bootstrap = '';\n        this._inputs = [];\n        this._p5Ready = new PromiseDelegate();\n        const { p5Url } = options;\n        this._bootstrap = `\n      import('${p5Url}').then(() => {\n        // create the p5 global instance\n        window.__globalP5 = new p5();\n        return Promise.resolve();\n      })\n    `;\n        // wait for the parent IFrame to be ready\n        super.ready.then(() => {\n            this._eval(this._bootstrap);\n            this._p5Ready.resolve();\n        });\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._p5Ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'p5.js',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'p5js',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A p5.js kernel',\n            help_links: [\n                {\n                    text: 'p5.js Kernel',\n                    url: 'https://github.com/jupyterlite/p5-kernel'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        if (code.startsWith('%')) {\n            const res = await this._magics(code);\n            if (res) {\n                this.publishExecuteResult(res);\n                return {\n                    status: 'ok',\n                    execution_count: this.executionCount,\n                    user_expressions: {}\n                };\n            }\n        }\n        const res = super.executeRequest(content);\n        this._inputs.push(code);\n        return res;\n    }\n    /**\n     * Handle magics coming from execute requests.\n     *\n     * @param code The code block to handle.\n     */\n    async _magics(code) {\n        var _a, _b;\n        if (code.startsWith('%show')) {\n            const input = this._inputs.map(c => `window.eval(\\`${c}\\`);`).join('\\n');\n            const script = `\n        ${this._bootstrap}.then(() => {\n          ${input}\n          window.__globalP5._start();\n        })\n      `;\n            // add metadata\n            const re = /^%show(?: (.+)\\s+(.+))?\\s*$/;\n            const matches = code.match(re);\n            const width = (_a = matches === null || matches === void 0 ? void 0 : matches[1]) !== null && _a !== void 0 ? _a : undefined;\n            const height = (_b = matches === null || matches === void 0 ? void 0 : matches[2]) !== null && _b !== void 0 ? _b : undefined;\n            return {\n                execution_count: this.executionCount,\n                data: {\n                    [MIME_TYPE]: [\n                        '<body style=\"overflow: hidden;\">',\n                        `<script>${script}</script>`,\n                        '</body>'\n                    ].join('\\n')\n                },\n                metadata: {\n                    [MIME_TYPE]: {\n                        width,\n                        height\n                    }\n                }\n            };\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}