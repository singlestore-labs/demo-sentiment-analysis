{"version":3,"file":"lib_index_js.257e7af93ee618f7d9c5.js","mappings":";;;;;;;;;;;;;;;AAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mDAAmD;AACjE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,cAAc,yCAAyC;AACvD;AACA;AACA;AACA,aAAa;AACb,cAAc,mCAAmC;AACjD,cAAc,mDAAmD;AACjE;AACA,cAAc,kDAAkD;AAChE,cAAc,8CAA8C;AAC5D;AACA,cAAc,UAAU,oBAAoB;AAC5C,cAAc,UAAU,qBAAqB;AAC7C,cAAc;AACd;AACA;AACA;AACA,cAAc,mDAAmD;AACjE,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyter-wren-syntax/./lib/index.js"],"sourcesContent":["import { ICodeMirror } from '@jupyterlab/codemirror';\nfunction registerWrenFileType(app) {\n    app.docRegistry.addFileType({\n        name: 'wren',\n        displayName: 'wren',\n        extensions: ['wren'],\n        mimeTypes: ['text/x-wren']\n    });\n}\nfunction defineWrenCodeMirrorMode(code_mirror_singleton) {\n    code_mirror_singleton.defineSimpleMode('wren', {\n        // The start state contains the rules that are initially used\n        start: [\n            // The regex matches the token, the token property contains the type\n            { regex: /\"(?:[^\\\\]|\\\\.)*?(?:\"|$)/, token: 'string' },\n            // You can match multiple tokens at once. Note that the captured\n            // groups must span the whole string in this case\n            {\n                regex: /(function)(\\s+)([a-z$][\\w$]*)/,\n                token: ['keyword', null, 'variable-2']\n            },\n            // Rules are matched in the order in which they appear, so there is\n            // no ambiguity between this one and the one above\n            {\n                regex: /(?:function|as|break|class|construct|continue|else|false|for|foreign|if|import|in|is|null|return|static|super|this|true|var|while)\\b/,\n                token: 'keyword'\n            },\n            { regex: /true|false|null/, token: 'atom' },\n            {\n                regex: /0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?/i,\n                token: 'number'\n            },\n            { regex: /\\/\\/.*/, token: 'comment' },\n            { regex: /\\/(?:[^\\\\]|\\\\.)*?\\//, token: 'variable-3' },\n            // A next property will cause the mode to move to a different state\n            { regex: /\\/\\*/, token: 'comment', next: 'comment' },\n            { regex: /[-+/*=<>!~.%?:]+/, token: 'operator' },\n            // indent and dedent properties guide autoindentation\n            { regex: /[{[(]/, indent: true },\n            { regex: /[}]\\)]/, dedent: true },\n            { regex: /[a-z$][\\w$]*/, token: 'variable' }\n        ],\n        // The multi-line comment state.\n        comment: [\n            { regex: /.*?\\*\\//, token: 'comment', next: 'start' },\n            { regex: /.*/, token: 'comment' }\n        ],\n        // The meta property contains global information about the mode. It\n        // can contain properties like lineComment, which are supported by\n        // all modes, and also directives like dontIndentStates, which are\n        // specific to simple modes.\n        meta: {\n            dontIndentStates: ['comment'],\n            lineComment: '//'\n        }\n    });\n    code_mirror_singleton.defineMIME('text/x-wren', 'wren');\n    code_mirror_singleton.modeInfo.push({\n        ext: ['wren'],\n        mime: 'text/x-wren',\n        mode: 'wren',\n        name: 'wren'\n    });\n}\n/**\n * Initialization data for the jupyter-wren-syntax extension.\n */\nconst plugin = {\n    id: 'jupyter-wren-syntax:plugin',\n    autoStart: true,\n    requires: [ICodeMirror],\n    activate: (app, codeMirror) => {\n        console.log('JupyterLab extension jupyter-wren-syntax is activated!');\n        registerWrenFileType(app);\n        defineWrenCodeMirrorMode(codeMirror.CodeMirror);\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}